/*
 * App Store Connect API
 * Automate the tasks you perform on the Apple Developer website and in App Store Connect.  The App Store Connect API is a REST API that enables the automation of actions you take in App Store Connect.  Calls to the API require JSON Web Tokens (JWT) for authorization; you obtain keys to create the tokens from your organizationâ€™s App Store Connect account.
 *
 * The version of the OpenAPI document: 1.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package net.odyssi.asc4j.model;

import java.io.Serializable;
import java.util.Objects;

import javax.validation.Valid;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;
import com.fasterxml.jackson.annotation.JsonValue;

/**
 * AgeRatingDeclarationAttributes
 */
@JsonPropertyOrder({ AgeRatingDeclarationAttributes.JSON_PROPERTY_ALCOHOL_TOBACCO_OR_DRUG_USE_OR_REFERENCES,
		AgeRatingDeclarationAttributes.JSON_PROPERTY_GAMBLING_AND_CONTESTS,
		AgeRatingDeclarationAttributes.JSON_PROPERTY_GAMBLING_SIMULATED,
		AgeRatingDeclarationAttributes.JSON_PROPERTY_KIDS_AGE_BAND,
		AgeRatingDeclarationAttributes.JSON_PROPERTY_MEDICAL_OR_TREATMENT_INFORMATION,
		AgeRatingDeclarationAttributes.JSON_PROPERTY_PROFANITY_OR_CRUDE_HUMOR,
		AgeRatingDeclarationAttributes.JSON_PROPERTY_SEXUAL_CONTENT_GRAPHIC_AND_NUDITY,
		AgeRatingDeclarationAttributes.JSON_PROPERTY_SEXUAL_CONTENT_OR_NUDITY,
		AgeRatingDeclarationAttributes.JSON_PROPERTY_HORROR_OR_FEAR_THEMES,
		AgeRatingDeclarationAttributes.JSON_PROPERTY_MATURE_OR_SUGGESTIVE_THEMES,
		AgeRatingDeclarationAttributes.JSON_PROPERTY_UNRESTRICTED_WEB_ACCESS,
		AgeRatingDeclarationAttributes.JSON_PROPERTY_VIOLENCE_CARTOON_OR_FANTASY,
		AgeRatingDeclarationAttributes.JSON_PROPERTY_VIOLENCE_REALISTIC_PROLONGED_GRAPHIC_OR_SADISTIC,
		AgeRatingDeclarationAttributes.JSON_PROPERTY_VIOLENCE_REALISTIC })
public class AgeRatingDeclarationAttributes implements Serializable {

	/**
	 * Gets or Sets alcoholTobaccoOrDrugUseOrReferences
	 */
	public enum AlcoholTobaccoOrDrugUseOrReferencesEnum {
		FREQUENT_OR_INTENSE("FREQUENT_OR_INTENSE"),

		INFREQUENT_OR_MILD("INFREQUENT_OR_MILD"),

		NONE("NONE");

		@JsonCreator
		public static AlcoholTobaccoOrDrugUseOrReferencesEnum fromValue(String value) {
			for (AlcoholTobaccoOrDrugUseOrReferencesEnum b : AlcoholTobaccoOrDrugUseOrReferencesEnum.values()) {
				if (b.value.equals(value)) {
					return b;
				}
			}
			throw new IllegalArgumentException("Unexpected value '" + value + "'");
		}

		private String value;

		AlcoholTobaccoOrDrugUseOrReferencesEnum(String value) {
			this.value = value;
		}

		@JsonValue
		public String getValue() {
			return this.value;
		}

		@Override
		public String toString() {
			return String.valueOf(this.value);
		}
	}

	/**
	 * Gets or Sets gamblingSimulated
	 */
	public enum GamblingSimulatedEnum {
		FREQUENT_OR_INTENSE("FREQUENT_OR_INTENSE"),

		INFREQUENT_OR_MILD("INFREQUENT_OR_MILD"),

		NONE("NONE");

		@JsonCreator
		public static GamblingSimulatedEnum fromValue(String value) {
			for (GamblingSimulatedEnum b : GamblingSimulatedEnum.values()) {
				if (b.value.equals(value)) {
					return b;
				}
			}
			throw new IllegalArgumentException("Unexpected value '" + value + "'");
		}

		private String value;

		GamblingSimulatedEnum(String value) {
			this.value = value;
		}

		@JsonValue
		public String getValue() {
			return this.value;
		}

		@Override
		public String toString() {
			return String.valueOf(this.value);
		}
	}

	/**
	 * Gets or Sets horrorOrFearThemes
	 */
	public enum HorrorOrFearThemesEnum {
		FREQUENT_OR_INTENSE("FREQUENT_OR_INTENSE"),

		INFREQUENT_OR_MILD("INFREQUENT_OR_MILD"),

		NONE("NONE");

		@JsonCreator
		public static HorrorOrFearThemesEnum fromValue(String value) {
			for (HorrorOrFearThemesEnum b : HorrorOrFearThemesEnum.values()) {
				if (b.value.equals(value)) {
					return b;
				}
			}
			throw new IllegalArgumentException("Unexpected value '" + value + "'");
		}

		private String value;

		HorrorOrFearThemesEnum(String value) {
			this.value = value;
		}

		@JsonValue
		public String getValue() {
			return this.value;
		}

		@Override
		public String toString() {
			return String.valueOf(this.value);
		}
	}

	/**
	 * Gets or Sets matureOrSuggestiveThemes
	 */
	public enum MatureOrSuggestiveThemesEnum {
		FREQUENT_OR_INTENSE("FREQUENT_OR_INTENSE"),

		INFREQUENT_OR_MILD("INFREQUENT_OR_MILD"),

		NONE("NONE");

		@JsonCreator
		public static MatureOrSuggestiveThemesEnum fromValue(String value) {
			for (MatureOrSuggestiveThemesEnum b : MatureOrSuggestiveThemesEnum.values()) {
				if (b.value.equals(value)) {
					return b;
				}
			}
			throw new IllegalArgumentException("Unexpected value '" + value + "'");
		}

		private String value;

		MatureOrSuggestiveThemesEnum(String value) {
			this.value = value;
		}

		@JsonValue
		public String getValue() {
			return this.value;
		}

		@Override
		public String toString() {
			return String.valueOf(this.value);
		}
	}

	/**
	 * Gets or Sets medicalOrTreatmentInformation
	 */
	public enum MedicalOrTreatmentInformationEnum {
		FREQUENT_OR_INTENSE("FREQUENT_OR_INTENSE"),

		INFREQUENT_OR_MILD("INFREQUENT_OR_MILD"),

		NONE("NONE");

		@JsonCreator
		public static MedicalOrTreatmentInformationEnum fromValue(String value) {
			for (MedicalOrTreatmentInformationEnum b : MedicalOrTreatmentInformationEnum.values()) {
				if (b.value.equals(value)) {
					return b;
				}
			}
			throw new IllegalArgumentException("Unexpected value '" + value + "'");
		}

		private String value;

		MedicalOrTreatmentInformationEnum(String value) {
			this.value = value;
		}

		@JsonValue
		public String getValue() {
			return this.value;
		}

		@Override
		public String toString() {
			return String.valueOf(this.value);
		}
	}

	/**
	 * Gets or Sets profanityOrCrudeHumor
	 */
	public enum ProfanityOrCrudeHumorEnum {
		FREQUENT_OR_INTENSE("FREQUENT_OR_INTENSE"),

		INFREQUENT_OR_MILD("INFREQUENT_OR_MILD"),

		NONE("NONE");

		@JsonCreator
		public static ProfanityOrCrudeHumorEnum fromValue(String value) {
			for (ProfanityOrCrudeHumorEnum b : ProfanityOrCrudeHumorEnum.values()) {
				if (b.value.equals(value)) {
					return b;
				}
			}
			throw new IllegalArgumentException("Unexpected value '" + value + "'");
		}

		private String value;

		ProfanityOrCrudeHumorEnum(String value) {
			this.value = value;
		}

		@JsonValue
		public String getValue() {
			return this.value;
		}

		@Override
		public String toString() {
			return String.valueOf(this.value);
		}
	}

	/**
	 * Gets or Sets sexualContentGraphicAndNudity
	 */
	public enum SexualContentGraphicAndNudityEnum {
		FREQUENT_OR_INTENSE("FREQUENT_OR_INTENSE"),

		INFREQUENT_OR_MILD("INFREQUENT_OR_MILD"),

		NONE("NONE");

		@JsonCreator
		public static SexualContentGraphicAndNudityEnum fromValue(String value) {
			for (SexualContentGraphicAndNudityEnum b : SexualContentGraphicAndNudityEnum.values()) {
				if (b.value.equals(value)) {
					return b;
				}
			}
			throw new IllegalArgumentException("Unexpected value '" + value + "'");
		}

		private String value;

		SexualContentGraphicAndNudityEnum(String value) {
			this.value = value;
		}

		@JsonValue
		public String getValue() {
			return this.value;
		}

		@Override
		public String toString() {
			return String.valueOf(this.value);
		}
	}

	/**
	 * Gets or Sets sexualContentOrNudity
	 */
	public enum SexualContentOrNudityEnum {
		FREQUENT_OR_INTENSE("FREQUENT_OR_INTENSE"),

		INFREQUENT_OR_MILD("INFREQUENT_OR_MILD"),

		NONE("NONE");

		@JsonCreator
		public static SexualContentOrNudityEnum fromValue(String value) {
			for (SexualContentOrNudityEnum b : SexualContentOrNudityEnum.values()) {
				if (b.value.equals(value)) {
					return b;
				}
			}
			throw new IllegalArgumentException("Unexpected value '" + value + "'");
		}

		private String value;

		SexualContentOrNudityEnum(String value) {
			this.value = value;
		}

		@JsonValue
		public String getValue() {
			return this.value;
		}

		@Override
		public String toString() {
			return String.valueOf(this.value);
		}
	}

	/**
	 * Gets or Sets violenceCartoonOrFantasy
	 */
	public enum ViolenceCartoonOrFantasyEnum {
		FREQUENT_OR_INTENSE("FREQUENT_OR_INTENSE"),

		INFREQUENT_OR_MILD("INFREQUENT_OR_MILD"),

		NONE("NONE");

		@JsonCreator
		public static ViolenceCartoonOrFantasyEnum fromValue(String value) {
			for (ViolenceCartoonOrFantasyEnum b : ViolenceCartoonOrFantasyEnum.values()) {
				if (b.value.equals(value)) {
					return b;
				}
			}
			throw new IllegalArgumentException("Unexpected value '" + value + "'");
		}

		private String value;

		ViolenceCartoonOrFantasyEnum(String value) {
			this.value = value;
		}

		@JsonValue
		public String getValue() {
			return this.value;
		}

		@Override
		public String toString() {
			return String.valueOf(this.value);
		}
	}

	/**
	 * Gets or Sets violenceRealistic
	 */
	public enum ViolenceRealisticEnum {
		FREQUENT_OR_INTENSE("FREQUENT_OR_INTENSE"),

		INFREQUENT_OR_MILD("INFREQUENT_OR_MILD"),

		NONE("NONE");

		@JsonCreator
		public static ViolenceRealisticEnum fromValue(String value) {
			for (ViolenceRealisticEnum b : ViolenceRealisticEnum.values()) {
				if (b.value.equals(value)) {
					return b;
				}
			}
			throw new IllegalArgumentException("Unexpected value '" + value + "'");
		}

		private String value;

		ViolenceRealisticEnum(String value) {
			this.value = value;
		}

		@JsonValue
		public String getValue() {
			return this.value;
		}

		@Override
		public String toString() {
			return String.valueOf(this.value);
		}
	}

	/**
	 * Gets or Sets violenceRealisticProlongedGraphicOrSadistic
	 */
	public enum ViolenceRealisticProlongedGraphicOrSadisticEnum {
		FREQUENT_OR_INTENSE("FREQUENT_OR_INTENSE"),

		INFREQUENT_OR_MILD("INFREQUENT_OR_MILD"),

		NONE("NONE");

		@JsonCreator
		public static ViolenceRealisticProlongedGraphicOrSadisticEnum fromValue(String value) {
			for (ViolenceRealisticProlongedGraphicOrSadisticEnum b : ViolenceRealisticProlongedGraphicOrSadisticEnum
					.values()) {
				if (b.value.equals(value)) {
					return b;
				}
			}
			throw new IllegalArgumentException("Unexpected value '" + value + "'");
		}

		private String value;

		ViolenceRealisticProlongedGraphicOrSadisticEnum(String value) {
			this.value = value;
		}

		@JsonValue
		public String getValue() {
			return this.value;
		}

		@Override
		public String toString() {
			return String.valueOf(this.value);
		}
	}

	public static final String JSON_PROPERTY_ALCOHOL_TOBACCO_OR_DRUG_USE_OR_REFERENCES = "alcoholTobaccoOrDrugUseOrReferences";

	public static final String JSON_PROPERTY_GAMBLING_AND_CONTESTS = "gamblingAndContests";

	public static final String JSON_PROPERTY_GAMBLING_SIMULATED = "gamblingSimulated";
	public static final String JSON_PROPERTY_HORROR_OR_FEAR_THEMES = "horrorOrFearThemes";

	public static final String JSON_PROPERTY_KIDS_AGE_BAND = "kidsAgeBand";

	public static final String JSON_PROPERTY_MATURE_OR_SUGGESTIVE_THEMES = "matureOrSuggestiveThemes";
	public static final String JSON_PROPERTY_MEDICAL_OR_TREATMENT_INFORMATION = "medicalOrTreatmentInformation";

	public static final String JSON_PROPERTY_PROFANITY_OR_CRUDE_HUMOR = "profanityOrCrudeHumor";

	public static final String JSON_PROPERTY_SEXUAL_CONTENT_GRAPHIC_AND_NUDITY = "sexualContentGraphicAndNudity";
	public static final String JSON_PROPERTY_SEXUAL_CONTENT_OR_NUDITY = "sexualContentOrNudity";

	public static final String JSON_PROPERTY_UNRESTRICTED_WEB_ACCESS = "unrestrictedWebAccess";

	public static final String JSON_PROPERTY_VIOLENCE_CARTOON_OR_FANTASY = "violenceCartoonOrFantasy";
	public static final String JSON_PROPERTY_VIOLENCE_REALISTIC = "violenceRealistic";

	public static final String JSON_PROPERTY_VIOLENCE_REALISTIC_PROLONGED_GRAPHIC_OR_SADISTIC = "violenceRealisticProlongedGraphicOrSadistic";

	private static final long serialVersionUID = 8260430488461812443L;

	private AlcoholTobaccoOrDrugUseOrReferencesEnum alcoholTobaccoOrDrugUseOrReferences;

	private Boolean gamblingAndContests;
	private GamblingSimulatedEnum gamblingSimulated;

	private HorrorOrFearThemesEnum horrorOrFearThemes;
	private KidsAgeBand kidsAgeBand;

	private MatureOrSuggestiveThemesEnum matureOrSuggestiveThemes;

	private MedicalOrTreatmentInformationEnum medicalOrTreatmentInformation;
	private ProfanityOrCrudeHumorEnum profanityOrCrudeHumor;

	private SexualContentGraphicAndNudityEnum sexualContentGraphicAndNudity;

	private SexualContentOrNudityEnum sexualContentOrNudity;
	private Boolean unrestrictedWebAccess;

	private ViolenceCartoonOrFantasyEnum violenceCartoonOrFantasy;

	private ViolenceRealisticEnum violenceRealistic;
	private ViolenceRealisticProlongedGraphicOrSadisticEnum violenceRealisticProlongedGraphicOrSadistic;

	public AgeRatingDeclarationAttributes alcoholTobaccoOrDrugUseOrReferences(
			AlcoholTobaccoOrDrugUseOrReferencesEnum alcoholTobaccoOrDrugUseOrReferences) {
		this.alcoholTobaccoOrDrugUseOrReferences = alcoholTobaccoOrDrugUseOrReferences;
		return this;
	}

	@Override
	public boolean equals(java.lang.Object o) {
		if (this == o) {
			return true;
		}
		if (o == null || getClass() != o.getClass()) {
			return false;
		}
		AgeRatingDeclarationAttributes ageRatingDeclarationAttributes = (AgeRatingDeclarationAttributes) o;
		return Objects.equals(this.alcoholTobaccoOrDrugUseOrReferences,
				ageRatingDeclarationAttributes.alcoholTobaccoOrDrugUseOrReferences)
				&& Objects.equals(this.gamblingAndContests, ageRatingDeclarationAttributes.gamblingAndContests)
				&& Objects.equals(this.gamblingSimulated, ageRatingDeclarationAttributes.gamblingSimulated)
				&& Objects.equals(this.kidsAgeBand, ageRatingDeclarationAttributes.kidsAgeBand)
				&& Objects.equals(this.medicalOrTreatmentInformation,
						ageRatingDeclarationAttributes.medicalOrTreatmentInformation)
				&& Objects.equals(this.profanityOrCrudeHumor, ageRatingDeclarationAttributes.profanityOrCrudeHumor)
				&& Objects.equals(this.sexualContentGraphicAndNudity,
						ageRatingDeclarationAttributes.sexualContentGraphicAndNudity)
				&& Objects.equals(this.sexualContentOrNudity, ageRatingDeclarationAttributes.sexualContentOrNudity)
				&& Objects.equals(this.horrorOrFearThemes, ageRatingDeclarationAttributes.horrorOrFearThemes)
				&& Objects.equals(this.matureOrSuggestiveThemes,
						ageRatingDeclarationAttributes.matureOrSuggestiveThemes)
				&& Objects.equals(this.unrestrictedWebAccess, ageRatingDeclarationAttributes.unrestrictedWebAccess)
				&& Objects.equals(this.violenceCartoonOrFantasy,
						ageRatingDeclarationAttributes.violenceCartoonOrFantasy)
				&& Objects.equals(this.violenceRealisticProlongedGraphicOrSadistic,
						ageRatingDeclarationAttributes.violenceRealisticProlongedGraphicOrSadistic)
				&& Objects.equals(this.violenceRealistic, ageRatingDeclarationAttributes.violenceRealistic);
	}

	public AgeRatingDeclarationAttributes gamblingAndContests(Boolean gamblingAndContests) {
		this.gamblingAndContests = gamblingAndContests;
		return this;
	}

	public AgeRatingDeclarationAttributes gamblingSimulated(GamblingSimulatedEnum gamblingSimulated) {
		this.gamblingSimulated = gamblingSimulated;
		return this;
	}

	/**
	 * Get alcoholTobaccoOrDrugUseOrReferences
	 *
	 * @return alcoholTobaccoOrDrugUseOrReferences
	 **/

	@JsonProperty(JSON_PROPERTY_ALCOHOL_TOBACCO_OR_DRUG_USE_OR_REFERENCES)
	@JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
	public AlcoholTobaccoOrDrugUseOrReferencesEnum getAlcoholTobaccoOrDrugUseOrReferences() {
		return this.alcoholTobaccoOrDrugUseOrReferences;
	}

	@JsonProperty(JSON_PROPERTY_GAMBLING_AND_CONTESTS)
	@JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
	public Boolean getGamblingAndContests() {
		return this.gamblingAndContests;
	}

	@JsonProperty(JSON_PROPERTY_GAMBLING_SIMULATED)
	@JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
	public GamblingSimulatedEnum getGamblingSimulated() {
		return this.gamblingSimulated;
	}

	@JsonProperty(JSON_PROPERTY_HORROR_OR_FEAR_THEMES)
	@JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
	public HorrorOrFearThemesEnum getHorrorOrFearThemes() {
		return this.horrorOrFearThemes;
	}

	@Valid
	@JsonProperty(JSON_PROPERTY_KIDS_AGE_BAND)
	@JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
	public KidsAgeBand getKidsAgeBand() {
		return this.kidsAgeBand;
	}

	@JsonProperty(JSON_PROPERTY_MATURE_OR_SUGGESTIVE_THEMES)
	@JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
	public MatureOrSuggestiveThemesEnum getMatureOrSuggestiveThemes() {
		return this.matureOrSuggestiveThemes;
	}

	@JsonProperty(JSON_PROPERTY_MEDICAL_OR_TREATMENT_INFORMATION)
	@JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
	public MedicalOrTreatmentInformationEnum getMedicalOrTreatmentInformation() {
		return this.medicalOrTreatmentInformation;
	}

	@JsonProperty(JSON_PROPERTY_PROFANITY_OR_CRUDE_HUMOR)
	@JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
	public ProfanityOrCrudeHumorEnum getProfanityOrCrudeHumor() {
		return this.profanityOrCrudeHumor;
	}

	@JsonProperty(JSON_PROPERTY_SEXUAL_CONTENT_GRAPHIC_AND_NUDITY)
	@JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
	public SexualContentGraphicAndNudityEnum getSexualContentGraphicAndNudity() {
		return this.sexualContentGraphicAndNudity;
	}

	@JsonProperty(JSON_PROPERTY_SEXUAL_CONTENT_OR_NUDITY)
	@JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
	public SexualContentOrNudityEnum getSexualContentOrNudity() {
		return this.sexualContentOrNudity;
	}

	@JsonProperty(JSON_PROPERTY_UNRESTRICTED_WEB_ACCESS)
	@JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
	public Boolean getUnrestrictedWebAccess() {
		return this.unrestrictedWebAccess;
	}

	@JsonProperty(JSON_PROPERTY_VIOLENCE_CARTOON_OR_FANTASY)
	@JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
	public ViolenceCartoonOrFantasyEnum getViolenceCartoonOrFantasy() {
		return this.violenceCartoonOrFantasy;
	}

	@JsonProperty(JSON_PROPERTY_VIOLENCE_REALISTIC)
	@JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
	public ViolenceRealisticEnum getViolenceRealistic() {
		return this.violenceRealistic;
	}

	@JsonProperty(JSON_PROPERTY_VIOLENCE_REALISTIC_PROLONGED_GRAPHIC_OR_SADISTIC)
	@JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
	public ViolenceRealisticProlongedGraphicOrSadisticEnum getViolenceRealisticProlongedGraphicOrSadistic() {
		return this.violenceRealisticProlongedGraphicOrSadistic;
	}

	@Override
	public int hashCode() {
		return Objects.hash(this.alcoholTobaccoOrDrugUseOrReferences, this.gamblingAndContests, this.gamblingSimulated,
				this.kidsAgeBand, this.medicalOrTreatmentInformation, this.profanityOrCrudeHumor,
				this.sexualContentGraphicAndNudity, this.sexualContentOrNudity, this.horrorOrFearThemes,
				this.matureOrSuggestiveThemes, this.unrestrictedWebAccess, this.violenceCartoonOrFantasy,
				this.violenceRealisticProlongedGraphicOrSadistic, this.violenceRealistic);
	}

	public AgeRatingDeclarationAttributes horrorOrFearThemes(HorrorOrFearThemesEnum horrorOrFearThemes) {
		this.horrorOrFearThemes = horrorOrFearThemes;
		return this;
	}

	public AgeRatingDeclarationAttributes kidsAgeBand(KidsAgeBand kidsAgeBand) {
		this.kidsAgeBand = kidsAgeBand;
		return this;
	}

	public AgeRatingDeclarationAttributes matureOrSuggestiveThemes(
			MatureOrSuggestiveThemesEnum matureOrSuggestiveThemes) {
		this.matureOrSuggestiveThemes = matureOrSuggestiveThemes;
		return this;
	}

	public AgeRatingDeclarationAttributes medicalOrTreatmentInformation(
			MedicalOrTreatmentInformationEnum medicalOrTreatmentInformation) {
		this.medicalOrTreatmentInformation = medicalOrTreatmentInformation;
		return this;
	}

	public AgeRatingDeclarationAttributes profanityOrCrudeHumor(ProfanityOrCrudeHumorEnum profanityOrCrudeHumor) {
		this.profanityOrCrudeHumor = profanityOrCrudeHumor;
		return this;
	}

	public void setAlcoholTobaccoOrDrugUseOrReferences(
			AlcoholTobaccoOrDrugUseOrReferencesEnum alcoholTobaccoOrDrugUseOrReferences) {
		this.alcoholTobaccoOrDrugUseOrReferences = alcoholTobaccoOrDrugUseOrReferences;
	}

	public void setGamblingAndContests(Boolean gamblingAndContests) {
		this.gamblingAndContests = gamblingAndContests;
	}

	public void setGamblingSimulated(GamblingSimulatedEnum gamblingSimulated) {
		this.gamblingSimulated = gamblingSimulated;
	}

	public void setHorrorOrFearThemes(HorrorOrFearThemesEnum horrorOrFearThemes) {
		this.horrorOrFearThemes = horrorOrFearThemes;
	}

	public void setKidsAgeBand(KidsAgeBand kidsAgeBand) {
		this.kidsAgeBand = kidsAgeBand;
	}

	public void setMatureOrSuggestiveThemes(MatureOrSuggestiveThemesEnum matureOrSuggestiveThemes) {
		this.matureOrSuggestiveThemes = matureOrSuggestiveThemes;
	}

	public void setMedicalOrTreatmentInformation(MedicalOrTreatmentInformationEnum medicalOrTreatmentInformation) {
		this.medicalOrTreatmentInformation = medicalOrTreatmentInformation;
	}

	public void setProfanityOrCrudeHumor(ProfanityOrCrudeHumorEnum profanityOrCrudeHumor) {
		this.profanityOrCrudeHumor = profanityOrCrudeHumor;
	}

	public void setSexualContentGraphicAndNudity(SexualContentGraphicAndNudityEnum sexualContentGraphicAndNudity) {
		this.sexualContentGraphicAndNudity = sexualContentGraphicAndNudity;
	}

	public void setSexualContentOrNudity(SexualContentOrNudityEnum sexualContentOrNudity) {
		this.sexualContentOrNudity = sexualContentOrNudity;
	}

	public void setUnrestrictedWebAccess(Boolean unrestrictedWebAccess) {
		this.unrestrictedWebAccess = unrestrictedWebAccess;
	}

	public void setViolenceCartoonOrFantasy(ViolenceCartoonOrFantasyEnum violenceCartoonOrFantasy) {
		this.violenceCartoonOrFantasy = violenceCartoonOrFantasy;
	}

	public void setViolenceRealistic(ViolenceRealisticEnum violenceRealistic) {
		this.violenceRealistic = violenceRealistic;
	}

	public void setViolenceRealisticProlongedGraphicOrSadistic(
			ViolenceRealisticProlongedGraphicOrSadisticEnum violenceRealisticProlongedGraphicOrSadistic) {
		this.violenceRealisticProlongedGraphicOrSadistic = violenceRealisticProlongedGraphicOrSadistic;
	}

	public AgeRatingDeclarationAttributes sexualContentGraphicAndNudity(
			SexualContentGraphicAndNudityEnum sexualContentGraphicAndNudity) {
		this.sexualContentGraphicAndNudity = sexualContentGraphicAndNudity;
		return this;
	}

	public AgeRatingDeclarationAttributes sexualContentOrNudity(SexualContentOrNudityEnum sexualContentOrNudity) {
		this.sexualContentOrNudity = sexualContentOrNudity;
		return this;
	}

	/**
	 * Convert the given object to string with each line indented by 4 spaces
	 * (except the first line).
	 */
	private String toIndentedString(java.lang.Object o) {
		if (o == null) {
			return "null";
		}
		return o.toString().replace("\n", "\n    ");
	}

	@Override
	public String toString() {
		StringBuilder sb = new StringBuilder();
		sb.append("class AgeRatingDeclarationAttributes {\n");
		sb.append("    alcoholTobaccoOrDrugUseOrReferences: ")
				.append(toIndentedString(this.alcoholTobaccoOrDrugUseOrReferences)).append("\n");
		sb.append("    gamblingAndContests: ").append(toIndentedString(this.gamblingAndContests)).append("\n");
		sb.append("    gamblingSimulated: ").append(toIndentedString(this.gamblingSimulated)).append("\n");
		sb.append("    kidsAgeBand: ").append(toIndentedString(this.kidsAgeBand)).append("\n");
		sb.append("    medicalOrTreatmentInformation: ").append(toIndentedString(this.medicalOrTreatmentInformation))
				.append("\n");
		sb.append("    profanityOrCrudeHumor: ").append(toIndentedString(this.profanityOrCrudeHumor)).append("\n");
		sb.append("    sexualContentGraphicAndNudity: ").append(toIndentedString(this.sexualContentGraphicAndNudity))
				.append("\n");
		sb.append("    sexualContentOrNudity: ").append(toIndentedString(this.sexualContentOrNudity)).append("\n");
		sb.append("    horrorOrFearThemes: ").append(toIndentedString(this.horrorOrFearThemes)).append("\n");
		sb.append("    matureOrSuggestiveThemes: ").append(toIndentedString(this.matureOrSuggestiveThemes))
				.append("\n");
		sb.append("    unrestrictedWebAccess: ").append(toIndentedString(this.unrestrictedWebAccess)).append("\n");
		sb.append("    violenceCartoonOrFantasy: ").append(toIndentedString(this.violenceCartoonOrFantasy))
				.append("\n");
		sb.append("    violenceRealisticProlongedGraphicOrSadistic: ")
				.append(toIndentedString(this.violenceRealisticProlongedGraphicOrSadistic)).append("\n");
		sb.append("    violenceRealistic: ").append(toIndentedString(this.violenceRealistic)).append("\n");
		sb.append("}");
		return sb.toString();
	}

	public AgeRatingDeclarationAttributes unrestrictedWebAccess(Boolean unrestrictedWebAccess) {
		this.unrestrictedWebAccess = unrestrictedWebAccess;
		return this;
	}

	public AgeRatingDeclarationAttributes violenceCartoonOrFantasy(
			ViolenceCartoonOrFantasyEnum violenceCartoonOrFantasy) {
		this.violenceCartoonOrFantasy = violenceCartoonOrFantasy;
		return this;
	}

	public AgeRatingDeclarationAttributes violenceRealistic(ViolenceRealisticEnum violenceRealistic) {
		this.violenceRealistic = violenceRealistic;
		return this;
	}

	public AgeRatingDeclarationAttributes violenceRealisticProlongedGraphicOrSadistic(
			ViolenceRealisticProlongedGraphicOrSadisticEnum violenceRealisticProlongedGraphicOrSadistic) {
		this.violenceRealisticProlongedGraphicOrSadistic = violenceRealisticProlongedGraphicOrSadistic;
		return this;
	}

}
