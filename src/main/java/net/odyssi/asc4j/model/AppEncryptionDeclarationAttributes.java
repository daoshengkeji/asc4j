/*
 * App Store Connect API
 * Automate the tasks you perform on the Apple Developer website and in App Store Connect.  The App Store Connect API is a REST API that enables the automation of actions you take in App Store Connect.  Calls to the API require JSON Web Tokens (JWT) for authorization; you obtain keys to create the tokens from your organizationâ€™s App Store Connect account.
 *
 * The version of the OpenAPI document: 1.2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package net.odyssi.asc4j.model;

import java.io.Serializable;
import java.time.OffsetDateTime;
import java.util.Objects;

import javax.validation.Valid;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonPropertyOrder;

/**
 * AppEncryptionDeclarationAttributes
 */
@JsonPropertyOrder({ AppEncryptionDeclarationAttributes.JSON_PROPERTY_USES_ENCRYPTION,
		AppEncryptionDeclarationAttributes.JSON_PROPERTY_EXEMPT,
		AppEncryptionDeclarationAttributes.JSON_PROPERTY_CONTAINS_PROPRIETARY_CRYPTOGRAPHY,
		AppEncryptionDeclarationAttributes.JSON_PROPERTY_CONTAINS_THIRD_PARTY_CRYPTOGRAPHY,
		AppEncryptionDeclarationAttributes.JSON_PROPERTY_AVAILABLE_ON_FRENCH_STORE,
		AppEncryptionDeclarationAttributes.JSON_PROPERTY_PLATFORM,
		AppEncryptionDeclarationAttributes.JSON_PROPERTY_UPLOADED_DATE,
		AppEncryptionDeclarationAttributes.JSON_PROPERTY_DOCUMENT_URL,
		AppEncryptionDeclarationAttributes.JSON_PROPERTY_DOCUMENT_NAME,
		AppEncryptionDeclarationAttributes.JSON_PROPERTY_DOCUMENT_TYPE,
		AppEncryptionDeclarationAttributes.JSON_PROPERTY_APP_ENCRYPTION_DECLARATION_STATE,
		AppEncryptionDeclarationAttributes.JSON_PROPERTY_CODE_VALUE })

public class AppEncryptionDeclarationAttributes implements Serializable {

	public static final String JSON_PROPERTY_APP_ENCRYPTION_DECLARATION_STATE = "appEncryptionDeclarationState";

	public static final String JSON_PROPERTY_AVAILABLE_ON_FRENCH_STORE = "availableOnFrenchStore";

	public static final String JSON_PROPERTY_CODE_VALUE = "codeValue";
	public static final String JSON_PROPERTY_CONTAINS_PROPRIETARY_CRYPTOGRAPHY = "containsProprietaryCryptography";

	public static final String JSON_PROPERTY_CONTAINS_THIRD_PARTY_CRYPTOGRAPHY = "containsThirdPartyCryptography";
	public static final String JSON_PROPERTY_DOCUMENT_NAME = "documentName";

	public static final String JSON_PROPERTY_DOCUMENT_TYPE = "documentType";
	public static final String JSON_PROPERTY_DOCUMENT_URL = "documentUrl";

	public static final String JSON_PROPERTY_EXEMPT = "exempt";
	public static final String JSON_PROPERTY_PLATFORM = "platform";

	public static final String JSON_PROPERTY_UPLOADED_DATE = "uploadedDate";
	public static final String JSON_PROPERTY_USES_ENCRYPTION = "usesEncryption";

	private static final long serialVersionUID = 6252845937198814248L;

	private AppEncryptionDeclarationState appEncryptionDeclarationState;
	private Boolean availableOnFrenchStore;

	private String codeValue;
	private Boolean containsProprietaryCryptography;

	private Boolean containsThirdPartyCryptography;
	private String documentName;

	private String documentType;
	private String documentUrl;

	private Boolean exempt;
	private Platform platform;

	private OffsetDateTime uploadedDate;
	private Boolean usesEncryption;

	public AppEncryptionDeclarationAttributes appEncryptionDeclarationState(
			AppEncryptionDeclarationState appEncryptionDeclarationState) {
		this.appEncryptionDeclarationState = appEncryptionDeclarationState;
		return this;
	}

	public AppEncryptionDeclarationAttributes availableOnFrenchStore(Boolean availableOnFrenchStore) {
		this.availableOnFrenchStore = availableOnFrenchStore;
		return this;
	}

	public AppEncryptionDeclarationAttributes codeValue(String codeValue) {
		this.codeValue = codeValue;
		return this;
	}

	public AppEncryptionDeclarationAttributes containsProprietaryCryptography(Boolean containsProprietaryCryptography) {
		this.containsProprietaryCryptography = containsProprietaryCryptography;
		return this;
	}

	public AppEncryptionDeclarationAttributes containsThirdPartyCryptography(Boolean containsThirdPartyCryptography) {
		this.containsThirdPartyCryptography = containsThirdPartyCryptography;
		return this;
	}

	public AppEncryptionDeclarationAttributes documentName(String documentName) {
		this.documentName = documentName;
		return this;
	}

	public AppEncryptionDeclarationAttributes documentType(String documentType) {
		this.documentType = documentType;
		return this;
	}

	public AppEncryptionDeclarationAttributes documentUrl(String documentUrl) {
		this.documentUrl = documentUrl;
		return this;
	}

	/*
	 *
	 * (non-Javadoc)
	 *
	 * @see java.lang.Object#equals(java.lang.Object)
	 */
	@Override
	public boolean equals(java.lang.Object o) {
		if (this == o) {
			return true;
		}
		if (o == null || getClass() != o.getClass()) {
			return false;
		}
		AppEncryptionDeclarationAttributes appEncryptionDeclarationAttributes = (AppEncryptionDeclarationAttributes) o;
		return Objects.equals(this.usesEncryption, appEncryptionDeclarationAttributes.usesEncryption)
				&& Objects.equals(this.exempt, appEncryptionDeclarationAttributes.exempt)
				&& Objects.equals(this.containsProprietaryCryptography,
						appEncryptionDeclarationAttributes.containsProprietaryCryptography)
				&& Objects.equals(this.containsThirdPartyCryptography,
						appEncryptionDeclarationAttributes.containsThirdPartyCryptography)
				&& Objects.equals(this.availableOnFrenchStore,
						appEncryptionDeclarationAttributes.availableOnFrenchStore)
				&& Objects.equals(this.platform, appEncryptionDeclarationAttributes.platform)
				&& Objects.equals(this.uploadedDate, appEncryptionDeclarationAttributes.uploadedDate)
				&& Objects.equals(this.documentUrl, appEncryptionDeclarationAttributes.documentUrl)
				&& Objects.equals(this.documentName, appEncryptionDeclarationAttributes.documentName)
				&& Objects.equals(this.documentType, appEncryptionDeclarationAttributes.documentType)
				&& Objects.equals(this.appEncryptionDeclarationState,
						appEncryptionDeclarationAttributes.appEncryptionDeclarationState)
				&& Objects.equals(this.codeValue, appEncryptionDeclarationAttributes.codeValue);
	}

	public AppEncryptionDeclarationAttributes exempt(Boolean exempt) {
		this.exempt = exempt;
		return this;
	}

	@Valid
	@JsonProperty(JSON_PROPERTY_APP_ENCRYPTION_DECLARATION_STATE)
	@JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
	public AppEncryptionDeclarationState getAppEncryptionDeclarationState() {
		return this.appEncryptionDeclarationState;
	}

	@JsonProperty(JSON_PROPERTY_AVAILABLE_ON_FRENCH_STORE)
	@JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
	public Boolean getAvailableOnFrenchStore() {
		return this.availableOnFrenchStore;
	}

	@JsonProperty(JSON_PROPERTY_CODE_VALUE)
	@JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
	public String getCodeValue() {
		return this.codeValue;
	}

	@JsonProperty(JSON_PROPERTY_CONTAINS_PROPRIETARY_CRYPTOGRAPHY)
	@JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
	public Boolean getContainsProprietaryCryptography() {
		return this.containsProprietaryCryptography;
	}

	@JsonProperty(JSON_PROPERTY_CONTAINS_THIRD_PARTY_CRYPTOGRAPHY)
	@JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
	public Boolean getContainsThirdPartyCryptography() {
		return this.containsThirdPartyCryptography;
	}

	@JsonProperty(JSON_PROPERTY_DOCUMENT_NAME)
	@JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
	public String getDocumentName() {
		return this.documentName;
	}

	@JsonProperty(JSON_PROPERTY_DOCUMENT_TYPE)
	@JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
	public String getDocumentType() {
		return this.documentType;
	}

	@JsonProperty(JSON_PROPERTY_DOCUMENT_URL)
	@JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
	public String getDocumentUrl() {
		return this.documentUrl;
	}

	@JsonProperty(JSON_PROPERTY_EXEMPT)
	@JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
	public Boolean getExempt() {
		return this.exempt;
	}

	@Valid
	@JsonProperty(JSON_PROPERTY_PLATFORM)
	@JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
	public Platform getPlatform() {
		return this.platform;
	}

	@Valid
	@JsonProperty(JSON_PROPERTY_UPLOADED_DATE)
	@JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
	public OffsetDateTime getUploadedDate() {
		return this.uploadedDate;
	}

	@JsonProperty(JSON_PROPERTY_USES_ENCRYPTION)
	@JsonInclude(value = JsonInclude.Include.USE_DEFAULTS)
	public Boolean getUsesEncryption() {
		return this.usesEncryption;
	}

	/*
	 *
	 * (non-Javadoc)
	 *
	 * @see java.lang.Object#hashCode()
	 */
	@Override
	public int hashCode() {
		return Objects.hash(this.usesEncryption, this.exempt, this.containsProprietaryCryptography,
				this.containsThirdPartyCryptography, this.availableOnFrenchStore, this.platform, this.uploadedDate,
				this.documentUrl, this.documentName, this.documentType, this.appEncryptionDeclarationState,
				this.codeValue);
	}

	public AppEncryptionDeclarationAttributes platform(Platform platform) {
		this.platform = platform;
		return this;
	}

	public void setAppEncryptionDeclarationState(AppEncryptionDeclarationState appEncryptionDeclarationState) {
		this.appEncryptionDeclarationState = appEncryptionDeclarationState;
	}

	public void setAvailableOnFrenchStore(Boolean availableOnFrenchStore) {
		this.availableOnFrenchStore = availableOnFrenchStore;
	}

	public void setCodeValue(String codeValue) {
		this.codeValue = codeValue;
	}

	public void setContainsProprietaryCryptography(Boolean containsProprietaryCryptography) {
		this.containsProprietaryCryptography = containsProprietaryCryptography;
	}

	public void setContainsThirdPartyCryptography(Boolean containsThirdPartyCryptography) {
		this.containsThirdPartyCryptography = containsThirdPartyCryptography;
	}

	public void setDocumentName(String documentName) {
		this.documentName = documentName;
	}

	public void setDocumentType(String documentType) {
		this.documentType = documentType;
	}

	public void setDocumentUrl(String documentUrl) {
		this.documentUrl = documentUrl;
	}

	public void setExempt(Boolean exempt) {
		this.exempt = exempt;
	}

	public void setPlatform(Platform platform) {
		this.platform = platform;
	}

	public void setUploadedDate(OffsetDateTime uploadedDate) {
		this.uploadedDate = uploadedDate;
	}

	public void setUsesEncryption(Boolean usesEncryption) {
		this.usesEncryption = usesEncryption;
	}

	/**
	 * Convert the given object to string with each line indented by 4 spaces
	 * (except the first line).
	 */
	private String toIndentedString(java.lang.Object o) {
		if (o == null) {
			return "null";
		}
		return o.toString().replace("\n", "\n    ");
	}

	/*
	 *
	 * (non-Javadoc)
	 *
	 * @see java.lang.Object#toString()
	 */
	@Override
	public String toString() {
		StringBuilder sb = new StringBuilder();
		sb.append("class AppEncryptionDeclarationAttributes {\n");
		sb.append("    usesEncryption: ").append(toIndentedString(this.usesEncryption)).append("\n");
		sb.append("    exempt: ").append(toIndentedString(this.exempt)).append("\n");
		sb.append("    containsProprietaryCryptography: ")
				.append(toIndentedString(this.containsProprietaryCryptography)).append("\n");
		sb.append("    containsThirdPartyCryptography: ").append(toIndentedString(this.containsThirdPartyCryptography))
				.append("\n");
		sb.append("    availableOnFrenchStore: ").append(toIndentedString(this.availableOnFrenchStore)).append("\n");
		sb.append("    platform: ").append(toIndentedString(this.platform)).append("\n");
		sb.append("    uploadedDate: ").append(toIndentedString(this.uploadedDate)).append("\n");
		sb.append("    documentUrl: ").append(toIndentedString(this.documentUrl)).append("\n");
		sb.append("    documentName: ").append(toIndentedString(this.documentName)).append("\n");
		sb.append("    documentType: ").append(toIndentedString(this.documentType)).append("\n");
		sb.append("    appEncryptionDeclarationState: ").append(toIndentedString(this.appEncryptionDeclarationState))
				.append("\n");
		sb.append("    codeValue: ").append(toIndentedString(this.codeValue)).append("\n");
		sb.append("}");
		return sb.toString();
	}

	public AppEncryptionDeclarationAttributes uploadedDate(OffsetDateTime uploadedDate) {
		this.uploadedDate = uploadedDate;
		return this;
	}

	public AppEncryptionDeclarationAttributes usesEncryption(Boolean usesEncryption) {
		this.usesEncryption = usesEncryption;
		return this;
	}

}
